<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<TargetFramework>net9.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<AddRazorSupportForMvc>true</AddRazorSupportForMvc>
		<StaticWebAssetBasePath>/</StaticWebAssetBasePath>
		<EnableDefaultContentItems>true</EnableDefaultContentItems>
	</PropertyGroup>

	<!-- NuGet package metadata -->
	<PropertyGroup>
		<Version>16.0.0-beta1</Version>
		<Description>
			Open or Closed - Yet another Business Hours package!

			Inspired by the Dexmoor BusinessHours package, this one uses the built-in date and time
			picker and targets Umbraco 16

			Property Editors:

			Standard Business Hours:
			Monday through to Sunday and optionally Bank Holidays, set each day Open or Closed with
			multiple ranges of times. Each time range can be flagged with "By Appointment".

			Special Business Hours:
			Adds the ability to specify specific dates, with the same set of features for Standard
			Business Hours.
		</Description>
		<Company>Your IT Group</Company>
		<Product>OpenOrClosed for Umbraco 16</Product>
		<Authors>Robert Foster-Williams</Authors>
		<Copyright>Copyright © 2022 - $([System.DateTime]::Now.Year) © $(Company)</Copyright>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageProjectUrl>https://github.com/YourITGroup/OpenOrClosed</PackageProjectUrl>
		<PackageIcon>OpenOrClosed_logo.png</PackageIcon>
		<PackageIconUrl>
			https://raw.githubusercontent.com/YourITGroup/OpenOrClosed/master/assets/OpenOrClosed_logo.png</PackageIconUrl>
		<PackageProjectUrl>https://github.com/YourITGroup/OpenOrClosed</PackageProjectUrl>
		<RepositoryUrl>https://github.com/YourITGroup/OpenOrClosed</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<PackageTags>umbraco umbraco-marketplace Business Hours</PackageTags>
		<PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
		<PackageReleaseNotes>Targeting Umbraco 16</PackageReleaseNotes>
		<PackageReadmeFile>README.nuget.md</PackageReadmeFile>
		<IncludeSymbols>true</IncludeSymbols>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Umbraco.Cms.Web.Website" Version="16.0.0" />
		<PackageReference Include="Umbraco.Cms.Api.Management" Version="16.0.0" />
	</ItemGroup>

	<ItemGroup>
		<!-- Don't include the client folder as part of packaging nuget build -->
		<Content Remove="Client\**" />

		<!-- However make the Umbraco-package.json included for dotnet pack or nuget package and
		visible to the solution -->
		<None Include="Client\public\umbraco-package.json" Pack="false" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\GithubFiles\Logo\OpenOrClosed_logo.png">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
		<None Include="..\README.nuget.md">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

	<!-- <Target Name="PackagePrepareAssets" BeforeTargets="PreBuildEvent"
		Condition="'$(Configuration)' == 'Release'">
		<Exec Command="npm run build" WorkingDirectory="Client" />
	</Target> -->

	<!--
      1. Install npm packages
      "Inputs" and "Outputs" are used for incremental builds. If all output items are up-to-date, MSBuild
	skips the target.
      The first time the task is executed. Then, it only runs when you change the package.json file.
      Documentation:
	https://learn.microsoft.com/en-us/visualstudio/msbuild/incremental-builds?WT.mc_id=DT-MVP-5003978
   -->
	<Target Name="NpmInstall" Inputs="client/package.json"
		Outputs="client/node_modules/.install-stamp">
		<!--
        Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:

        <PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>
     -->
		<!--<Exec
		Command="npm ci" WorkingDirectory="client" Condition="'$(RestorePackagesWithLockFile)' ==
		'true'" />-->
		<Exec Command="npm install" WorkingDirectory="client"
			Condition="'$(RestorePackagesWithLockFile)' != 'true'" />

		<!-- Write the stamp file, so incremental builds work -->
		<Touch Files="client/node_modules/.install-stamp" AlwaysCreate="true" />
	</Target>

	<!--
      2. Run npm run build before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.
   -->
	<Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild">
		<Exec Command="npm run build" WorkingDirectory="client" />
	</Target>
</Project>